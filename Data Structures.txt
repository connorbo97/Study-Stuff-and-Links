Data Structures:

	Trees, Tries, and Graphs: https://github.com/connorbo97/Study-Stuff-and-Links
	Trie nodes consist of arrays of size the alphabet you're using

Searches:
	Breadth First Search (BFS): search using queue,look through 1 level then move to next
	Depth First Search (DFS): search using stack, look down one branch then another
	Merge Sort:
		If r > l
		     1. Find the middle point to divide the array into two halves:  
		             middle m = (l+r)/2
		     2. Call mergeSort for first half:   
		             Call mergeSort(arr, l, m)
		     3. Call mergeSort for second half:
		             Call mergeSort(arr, m+1, r)
		     4. Merge the two halves sorted in step 2 and 3:
		             Call merge(arr, l, m, r)
		http://www.geeksforgeeks.org/wp-content/uploads/Merge-Sort-Tutorial.png
		C: void merge(int arr[], int l, int m, int r)
			{
			    int i, j, k;
			    int n1 = m - l + 1;
			    int n2 =  r - m;
			 
			    /* create temp arrays */
			    int L[n1], R[n2];
			 
			    /* Copy data to temp arrays L[] and R[] */
			    for (i = 0; i < n1; i++)
			        L[i] = arr[l + i];
			    for (j = 0; j < n2; j++)
			        R[j] = arr[m + 1+ j];
			 
			    /* Merge the temp arrays back into arr[l..r]*/
			    i = 0; // Initial index of first subarray
			    j = 0; // Initial index of second subarray
			    k = l; // Initial index of merged subarray
			    while (i < n1 && j < n2)
			    {
			        if (L[i] <= R[j])
			        {
			            arr[k] = L[i];
			            i++;
			        }
			        else
			        {
			            arr[k] = R[j];
			            j++;
			        }
			        k++;
			    }
			 
			    /* Copy the remaining elements of L[], if there
			       are any */
			    while (i < n1)
			    {
			        arr[k] = L[i];
			        i++;
			        k++;
			    }
			 
			    /* Copy the remaining elements of R[], if there
			       are any */
			    while (j < n2)
			    {
			        arr[k] = R[j];
			        j++;
			        k++;
			    }
			}
			 
			/* l is for left index and r is right index of the
			   sub-array of arr to be sorted */
			void mergeSort(int arr[], int l, int r)
			{
			    if (l < r)
			    {
			        // Same as (l+r)/2, but avoids overflow for
			        // large l and h
			        int m = l+(r-l)/2;
			 
			        // Sort first and second halves
			        mergeSort(arr, l, m);
			        mergeSort(arr, m+1, r);
			 
			        merge(arr, l, m, r);
			    }
			}
	Quick Sort:
		/* C implementation QuickSort */
		void example ()
		{
			#include<stdio.h>
			 
			// A utility function to swap two elements
			void swap(int* a, int* b)
			{
			    int t = *a;
			    *a = *b;
			    *b = t;
			}
			 
			/* This function takes last element as pivot, places
			   the pivot element at its correct position in sorted
			    array, and places all smaller (smaller than pivot)
			   to left of pivot and all greater elements to right
			   of pivot */
			int partition (int arr[], int low, int high)
			{
			    int pivot = arr[high];    // pivot
			    int i = (low - 1);  // Index of smaller element
			 
			    for (int j = low; j <= high- 1; j++)
			    {
			        // If current element is smaller than or
			        // equal to pivot
			        if (arr[j] <= pivot)
			        {
			            i++;    // increment index of smaller element
			            swap(&arr[i], &arr[j]);
			        }
			    }
			    swap(&arr[i + 1], &arr[high]);
			    return (i + 1);
			}
			 
			/* The main function that implements QuickSort
			 arr[] --> Array to be sorted,
			  low  --> Starting index,
			  high  --> Ending index */
			void quickSort(int arr[], int low, int high)
			{
			    if (low < high)
			    {
			        /* pi is partitioning index, arr[p] is now
			           at right place */
			        int pi = partition(arr, low, high);
			 
			        // Separately sort elements before
			        // partition and after partition
			        quickSort(arr, low, pi - 1);
			        quickSort(arr, pi + 1, high);
			    }
			}
		}